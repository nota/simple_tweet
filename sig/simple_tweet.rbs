module SimpleTweet
  VERSION: String

  module V2
    class Client
      TW_API_ORIGIN: String
      TW_UPLOAD_ORIGIN: String
      TW_MEDIA_UPLOAD_PATH: String
      TW_METADATA_CREATE_PATH: String
      TW_TWEET_PATH: String
      UA: String
      APPEND_PER: Integer

      def initialize: (consumer_key: String, consumer_secret: String, access_token: String, access_token_secret: String, ?max_append_retry: Integer) -> void
      def tweet: (message: String, ?media_ids: Array[String]) -> Net::HTTPResponse
      def tweet_with_media: (message: String, media_type: String, media: untyped, ?alt_text: String?) -> Net::HTTPResponse

      @consumer_key_: String
      @consumer_secret_: String
      @access_token_: String
      @access_token_secret_: String
      @max_append_retry_: Integer
      @client: untyped # ::OAuth::AccessToken

      private
      def access_token: (?site: String) -> untyped
      def request: (Net::HTTPRequest req) -> Net::HTTPResponse
      def request_with_retry: (req: Net::HTTPRequest, expected_status_code: String, error_kind_message: String, ?retry_count: Integer) -> Net::HTTPResponse
      def upload_media: (media_type: String, media: untyped) -> [String]
      def init: (video: untyped) -> Hash[String, untyped]
      def append: (video: untyped, media_id: String, index: untyped) -> Net::HTTPResponse
      def finalize: (media_id: String) -> Hash[String, untyped]
      def status: (media_id: String) -> Hash[String, untyped]
      def upload_video: (video: untyped) -> [String]
      def create_media_metadata: (media_id: String, alt_text: String?) -> Net::HTTPResponse
    end
  end

  class Error < StandardError
  end

  class UploadMediaError < Error
    attr_reader response: Net::HTTPResponse?
    def initialize: (?String? message, ?response: Net::HTTPResponse?) -> void
  end
end
